import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.arima.model import ARIMA
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf


df = pd.read_csv(r"C:\Users\infos\Downloads\household_power_consumption_household_power_consumption.csv")

global_active_power = df.pop('Global_active_power')
global_reactive_power = df.pop('Global_reactive_power')
df['Global_active_power'] = global_active_power
df['Global_reactive_power'] = global_reactive_power

df['Date'] = pd.to_datetime(df['Date'], dayfirst=True)
df['DateTime'] = pd.to_datetime(df['Date'].dt.strftime('%Y-%m-%d') + ' ' + df['Time'])

df.set_index('DateTime', inplace=True)
df.drop(['Date', 'Time'], axis=1, inplace=True)

for i in range(len(df.columns)):
    try:
        df[df.columns[i]] = pd.to_numeric(df[df.columns[i]], errors='coerce')
        print(f"Converted column {i} to numeric")
    except Exception as e:
        print(f"Could not convert column {i}: {e}")

df_default = df[1::60]

df_default['Sub_metering_1'] = pd.to_numeric(df_default['Sub_metering_1'], errors='coerce')
df_default.index = pd.to_datetime(df_default.index)
# Standardize Sub_metering_1
scaler_standard = StandardScaler()
df_default['Sub_metering_1_standard'] = scaler_standard.fit_transform(df_default[['Sub_metering_1']])

# Fit ARIMA model
series = df_default['Sub_metering_1_standard'].dropna()  # Drop NaNs if any

# Define the ARIMA model with the chosen parameters
model = ARIMA(series, order=(1, 0, 2))  # Adjusted parameters based on AIC evaluation
model_fit = model.fit()

# Diagnostic checks - residuals, ACF, PACF
residuals = model_fit.resid

plt.figure(figsize=(14, 6))

plt.subplot(1, 2, 1)
plt.plot(df_default.index[-len(residuals):], residuals)
plt.title('Residuals Plot')
plt.xlabel('Date')
plt.ylabel('Residuals')
plt.grid(True)

plt.subplot(1, 2, 2)
plot_acf(residuals, lags=30, ax=plt.gca())
plt.title('ACF of Residuals')
plt.grid(True)

plt.tight_layout()
plt.show()

# PACF plot
plt.figure(figsize=(10, 4))
plot_pacf(residuals, lags=30, ax=plt.gca())
plt.title('PACF of Residuals')
plt.grid(True)
plt.show()

# Forecasting
forecast_steps = 30  # Number of steps to forecast
forecast = model_fit.get_forecast(steps=forecast_steps)

# Inverse transform the forecasted values to original scale
forecast_values = scaler_standard.inverse_transform(forecast.predicted_mean.values.reshape(-1, 1)).flatten()

# Calculate confidence intervals
forecast_ci = forecast.conf_int()
ci_lower = scaler_standard.inverse_transform(forecast_ci.iloc[:, 0].values.reshape(-1, 1)).flatten()
ci_upper = scaler_standard.inverse_transform(forecast_ci.iloc[:, 1].values.reshape(-1, 1)).flatten()

# Plotting forecast
plt.figure(figsize=(12, 6))
plt.plot(df_default.index[-100:], df_default['Sub_metering_1'][-100:], label='Actual')  # Plot last 100 points of actual data
plt.plot(pd.date_range(start=df_default.index[-1], periods=forecast_steps, freq='D'), forecast_values, label='Forecast', linestyle='--')
plt.fill_between(pd.date_range(start=df_default.index[-1], periods=forecast_steps, freq='D'), ci_lower, ci_upper, color='gray', alpha=0.2)
plt.title('Sub_metering_1 Forecast')
plt.xlabel('Date')
plt.ylabel('Sub_metering_1')
plt.legend()
plt.grid(True)
plt.show()

# Calculate Mean Squared Error (MSE)
mse_arima = mean_squared_error(df_default['Sub_metering_1'][-forecast_steps:], forecast_values)
print(f'Mean Squared Error (ARIMA Forecast): {mse_arima}')


Mean Squared Error (ARIMA Forecast): 50.13347670323151



from statsmodels.tsa.statespace.sarimax import SARIMAX

# Define the SARIMA model (example parameters, adjust as needed based on your data)
model_sarima = SARIMAX(series, order=(1, 0, 2), seasonal_order=(1, 1, 1, 12))  # Adjust seasonal_order parameters

# Fit the SARIMA model
model_sarima_fit = model_sarima.fit(disp=False)

# Diagnostic checks - residuals, ACF, PACF
residuals_sarima = model_sarima_fit.resid

plt.figure(figsize=(14, 6))

plt.subplot(1, 2, 1)
plt.plot(df_default.index[-len(residuals_sarima):], residuals_sarima)
plt.title('SARIMA Residuals Plot')
plt.xlabel('Date')
plt.ylabel('Residuals')
plt.grid(True)

plt.subplot(1, 2, 2)
plot_acf(residuals_sarima, lags=30, ax=plt.gca())
plt.title('ACF of SARIMA Residuals')
plt.grid(True)

plt.tight_layout()
plt.show()

# PACF plot
plt.figure(figsize=(10, 4))
plot_pacf(residuals_sarima, lags=30, ax=plt.gca())
plt.title('PACF of SARIMA Residuals')
plt.grid(True)
plt.show()

# Forecasting with SARIMA
forecast_sarima_steps = 30  # Number of steps to forecast
forecast_sarima = model_sarima_fit.get_forecast(steps=forecast_sarima_steps)

# Inverse transform the forecasted values to original scale
forecast_sarima_values = scaler_standard.inverse_transform(forecast_sarima.predicted_mean.values.reshape(-1, 1)).flatten()

# Calculate confidence intervals for SARIMA forecast
forecast_sarima_ci = forecast_sarima.conf_int()
ci_sarima_lower = scaler_standard.inverse_transform(forecast_sarima_ci.iloc[:, 0].values.reshape(-1, 1)).flatten()
ci_sarima_upper = scaler_standard.inverse_transform(forecast_sarima_ci.iloc[:, 1].values.reshape(-1, 1)).flatten()

# Plotting SARIMA forecast
plt.figure(figsize=(12, 6))
plt.plot(df_default.index[-100:], df_default['Sub_metering_1'][-100:], label='Actual')  # Plot last 100 points of actual data
plt.plot(pd.date_range(start=df_default.index[-1], periods=forecast_sarima_steps, freq='D'), forecast_sarima_values, label='SARIMA Forecast', linestyle='--')
plt.fill_between(pd.date_range(start=df_default.index[-1], periods=forecast_sarima_steps, freq='D'), ci_sarima_lower, ci_sarima_upper, color='gray', alpha=0.2)
plt.title('Sub_metering_1 SARIMA Forecast')
plt.xlabel('Date')
plt.ylabel('Sub_metering_1')
plt.legend()
plt.grid(True)
plt.show()

# Calculate Mean Squared Error (MSE) for SARIMA
mse_sarima = mean_squared_error(df_default['Sub_metering_1'][-forecast_sarima_steps:], forecast_sarima_values)
print(f'Mean Squared Error (SARIMA Forecast): {mse_sarima}')



Mean Squared Error (SARIMA Forecast): 49.79319369422056
